'use strict';

const { isMainThread, skip, isWindows, getPrintedStackTrace } = require('../common');
const { strictEqual, ok } = require('assert');
const { spawnSync } = require('child_process');

if (!isMainThread) {
  skip('process.execve is not available in Workers');
} else if (isWindows) {
  skip('process.execve is not available in Windows');
}

if (process.argv[2] === 'child') {
  process.execve(
    process.execPath + '_non_existing',
    [__filename, 'replaced'],
    { EXECVE_A: 'FIRST', EXECVE_B: 'SECOND', CWD: process.cwd() }
  );
} else {
  const child = spawnSync(`${process.execPath}`, [`${__filename}`, 'child']);
  const stderr = child.stderr.toString();

  strictEqual(child.stdout.toString(), '');
  const { nativeStack, jsStack } = getPrintedStackTrace(stderr);

  ok(nativeStack[0].includes('node::Execve'));
  ok(jsStack[0].includes('execve'));
}
